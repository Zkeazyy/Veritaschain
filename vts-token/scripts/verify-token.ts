import { run, network } from "hardhat";
import * as fs from "fs";
import * as path from "path";

async function main() {
  console.log("üîç V√©rification du token VTS sur", network.name);
  
  // Charger le fichier de d√©ploiements
  const deploymentsPath = path.join(__dirname, "..", "deployments", "deployment.json");
  
  if (!fs.existsSync(deploymentsPath)) {
    throw new Error("‚ùå Fichier de d√©ploiements non trouv√©. D√©ployez d'abord le contrat.");
  }
  
  let deployments: Record<string, any> = {};
  
  try {
    const content = fs.readFileSync(deploymentsPath, "utf8");
    deployments = JSON.parse(content);
  } catch (error) {
    throw new Error("‚ùå Erreur lors de la lecture du fichier de d√©ploiements");
  }
  
  // R√©cup√©rer l'adresse pour le r√©seau actuel
  const networkDeployment = deployments[network.name];
  
  if (!networkDeployment || !networkDeployment.address) {
    throw new Error(`‚ùå Aucune adresse de d√©ploiement trouv√©e pour le r√©seau ${network.name}`);
  }
  
  const address = networkDeployment.address;
  console.log("üìç Adresse du contrat:", address);
  console.log("üîó Transaction de d√©ploiement:", networkDeployment.txHash);
  console.log("üìä Block de d√©ploiement:", networkDeployment.blockNumber);
  
  // V√©rifier le contrat
  console.log("‚è≥ V√©rification du contrat sur Etherscan...");
  
  // V√©rifier si c'est un r√©seau local
  if (network.name === "hardhat" || network.name === "localhost") {
    console.log("‚ö†Ô∏è R√©seau local d√©tect√© - V√©rification non support√©e");
    console.log("‚úÖ Le contrat est d√©ploy√© localement avec succ√®s !");
    return;
  }
  
  try {
    await run("verify:verify", {
      address: address,
      constructorArguments: [], // VTS n'a pas d'arguments de constructeur
    });
    
    console.log("‚úÖ Contrat v√©rifi√© avec succ√®s !");
    
    // Afficher l'URL de l'explorateur
    const explorerUrl = getExplorerUrl(network.name, address);
    if (explorerUrl) {
      console.log("üîç Explorateur:", explorerUrl);
    }
    
  } catch (error: any) {
    if (error.message.includes("Already Verified")) {
      console.log("‚úÖ Contrat d√©j√† v√©rifi√© !");
    } else if (error.message.includes("Contract source code already verified")) {
      console.log("‚úÖ Code source du contrat d√©j√† v√©rifi√© !");
    } else {
      console.error("‚ùå Erreur lors de la v√©rification:", error.message);
      throw error;
    }
  }
  
  console.log("\nüéâ V√©rification termin√©e !");
  console.log("üìù Le contrat est maintenant v√©rifi√© sur Etherscan");
}

function getExplorerUrl(networkName: string, address: string): string | null {
  const explorers: Record<string, string> = {
    sepolia: `https://sepolia.etherscan.io/address/${address}`,
    mainnet: `https://etherscan.io/address/${address}`,
    base: `https://basescan.org/address/${address}`,
    baseSepolia: `https://sepolia.basescan.org/address/${address}`,
    polygon: `https://polygonscan.com/address/${address}`,
  };
  
  return explorers[networkName] || null;
}

// Ex√©cuter le script
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erreur lors de la v√©rification:", error);
    process.exit(1);
  });
