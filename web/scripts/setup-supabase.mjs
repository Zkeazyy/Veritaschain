#!/usr/bin/env node

/**
 * VERITASCHAIN ‚Äî AUTO LINK SUPABASE SCRIPT
 * Objectif : ajouter DATABASE_URL Supabase, d√©ployer les migrations et ouvrir Prisma Studio.
 */

import fs from "fs";
import { execSync } from "child_process";

// ‚ö†Ô∏è REMPLACE TON DSN SUPABASE CI-DESSOUS
const SUPABASE_DSN = process.env.DATABASE_URL || "postgresql://postgres:TON_MOT_DE_PASSE@db.xxxxx.supabase.co:5432/postgres?sslmode=require";

console.log("==============================");
console.log("üöÄ VERITASCHAIN - SUPABASE SETUP");
console.log("==============================\n");

// √âtape 1 : Mise √† jour du fichier .env.local
console.log("üìÑ Mise √† jour du fichier .env.local ...");

const envPath = ".env.local";
let content = fs.existsSync(envPath) ? fs.readFileSync(envPath, "utf-8") : "";

if (content.includes("DATABASE_URL")) {
  content = content.replace(/DATABASE_URL=.*/g, `DATABASE_URL="${SUPABASE_DSN}"`);
  console.log("‚úÖ DATABASE_URL mis √† jour");
} else {
  content += `\nDATABASE_URL="${SUPABASE_DSN}"`;
  console.log("‚úÖ DATABASE_URL ajout√©");
}

if (!content.includes("TZ=")) {
  content += `\nTZ="UTC"`;
}

fs.writeFileSync(envPath, content);
console.log("‚úÖ .env.local configur√©\n");

// √âtape 2 : Installation de Prisma si n√©cessaire
console.log("üì¶ V√©rification de Prisma ...");
try {
  execSync("npx prisma --version", { stdio: "pipe" });
  console.log("‚úÖ Prisma d√©j√† install√©\n");
} catch {
  console.log("üì¶ Installation de Prisma ...");
  execSync("npm install @prisma/client prisma --save", { stdio: "inherit" });
  console.log("‚úÖ Prisma install√©\n");
}

// √âtape 3 : G√©n√©ration du client Prisma
console.log("üîß G√©n√©ration du client Prisma ...");
try {
  execSync("npx prisma generate", { stdio: "inherit" });
  console.log("‚úÖ Client Prisma g√©n√©r√©\n");
} catch (e) {
  console.error("üí• Erreur lors de la g√©n√©ration du client Prisma:", e.message);
}

// √âtape 4 : D√©ploiement des migrations
console.log("üöÄ D√©ploiement des migrations sur Supabase ...");
try {
  execSync("npx prisma migrate deploy", { stdio: "inherit" });
  console.log("‚úÖ Migrations d√©ploy√©es avec succ√®s\n");
} catch (e) {
  console.log("‚ö†Ô∏è  Aucune migration √† d√©ployer ou premi√®re initialisation");
  console.log("üí° Cr√©ez votre premi√®re migration avec: npx prisma migrate dev --name init\n");
}

// √âtape 5 : Ouverture de Prisma Studio
console.log("üåê Ouverture de Prisma Studio ...");
console.log("üí° Ctrl + Clic sur le lien qui s'affiche pour ouvrir dans votre navigateur\n");

try {
  execSync("npx prisma studio", { stdio: "inherit" });
} catch (e) {
  console.log("üí° Prisma Studio ferm√©");
}

console.log("\n==============================");
console.log("üéØ SUPABASE CONNECT√â √Ä VERITASCHAIN");
console.log("==============================");
console.log("‚úÖ DATABASE_URL ajout√© dans .env.local");
console.log("‚úÖ Client Prisma g√©n√©r√©");
console.log("‚úÖ Migrations pr√™tes √† √™tre d√©ploy√©es");
console.log("‚úÖ Prisma Studio disponible");
console.log("==============================\n");
